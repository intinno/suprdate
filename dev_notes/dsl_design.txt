Not doing these for now:
  - durations
  - time

=== DSL Design

  days => months => years

  days    \
  months   > have to be standalone 
  weeks   /
  
  === Conjuctions
    
    and       # provides every. creates a fresh sentence
    in        # provides every, continues to append existing sentence
    except    # specifies the same unit to follow in additional be the inverse

  === Limiters for continuous clauses
  
    - times(2)
    - limit(2)
    - from()                            # assumes now if omitted
    - to()                              # assumes infinity if omitted
    
  === Providing years
  
    === Specific years
    
      - every.year(2008)
      - every.years(2008, 2009)
      - every.years(Proc)
      
    === Continuous years
    
      - every.year
      - every(4).years
      - every(:fourth).year
      
  === Providing months
               
    === Specific months
    
      - every.month(:jan)
      - every.month(1)
      - every.month(1, 3, :aug)
    
    === Continuous months
    
      - every.month
      - every(4).months
      - every(:fourth).month

  === Providing days
  
    from and to limiters will be cast to next unit if there is one
  
    === Specific days of next unit (either month or year)
  
      - every.day(1)
      - every.day(-1) # should work for year as well
      - every.days(1, 3, -5)
      - every.day(:first => [:wed, :fri], 3 => [:sat])
      
    === Continuous days bound next unit (either month or year)
  
      - every.day
      - every(2).days
      - every(:third).day
      
    === Specific days of week
    
      - every.day(:mon, :tue, :wed)
      
=== Examples

  Christmas
  The Olympics
  Queen's birthday (twice a year)
  Rails Pub Night (first monday of every month excluding decembeer)

  every.year.from(2000).to(2012).except.year(2009)
  every.month.from(5).to(12)
  dsl.day(25).in.month(12).in.every.year
  
  
=== Classes

  + every : EveryClause

  === EveryClause
  
    + years(*year:Integer|Year) : Qualification
      alias :year :years
    + years(with block)
    + unit() : Year|Month|Day|Week # the unit specified last 
    + 
    
  === Qualification
  
    + initialize(chain, qualifiable)
    + times(Integer) : self
    + limit(Integer) : self
    + from() : self
    + to() : self
    + in() : chain
    + except()
    